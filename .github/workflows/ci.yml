name: Continuous integration

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  merge_group:
    types: [checks_requested]
  workflow_dispatch: {}
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Checkout
        uses: actions/checkout@v3
  # this --impure is a bit dodgy, it's a consequence of using devenv to produce
  # our shell.
      - run: nix flake check --impure --print-build-logs

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint nix
        run: nix run --impure --print-build-logs .#lint-nixfmt -- --check
      - name: Lint c++
        run: nix run --impure --print-build-logs .#lint-clang-format
      - name: rust - Check formatting
        run: nix develop --impure .#no-mlir --command cargo fmt --check

  build:
    # Ensure nix cache is populated
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: ["Debug", "Release"]
    steps:
      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: src
      - name: Configure
        run: nix develop --impure src#checked-mlir --command cmake -S src -B build -G Ninja -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
      - name: Build
        run: nix develop --impure src#checked-mlir --command ninja -C build
      - name: rust - Run clippy
        run: nix develop --impure src#checked-mlir --command cargo clippy --all-targets -- -D warnings
      - name: Test
        run: nix develop --impure src#checked-mlir --command ninja -C build check
      - name: Install
        run: nix develop --impure src#checked-mlir --command ninja -C build install
      - name: Install Test
        env:
          HUGR_MLIR_TOOLS_DIR=${{ github.workspace }}/install/bin
          HUGR_MLIR_PYTHONPATH_OVERRIDE=${{ github.workspace }}/install/python_packages
        run: nix develop --impure ./src#checked-mlir --command ninja -C build check
        # TODO: Once we've set up installing libraries + headers build a test
        # project against both the build and install trees
      # - name: Package Docs
      #   uses: actions/upload-pages-artifact@main
      #   with:
      #     path: install/share/doc/hugr-mlir

  # TODO Commented out for now. Before we can enable this we need to work out
  # which branch to deploy docs from. In a perfect world we could somehow deploy
  # from multiple branches, to confirm docs before merging to main.
  # deploy-docs:
  #   needs: build
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v2
