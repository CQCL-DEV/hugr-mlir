---
source: hugr-mlir/tests/guppy_export_tests.rs
description: /home/doug/code/hugr-mlir-develop/hugr-mlir/tests/guppy-exports/test_arith_big.json
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_arith_big.json
---
module {
  hugr.module {
    func @arith[](%arg0: i6, %arg1: f64, %arg2: i6) -> !hugr.sum<tuple<>, tuple<>> {
      %0 = dfg input extensions [] %arg0, %arg1, %arg2 : (i6, f64, i6) -> !hugr.sum<tuple<>, tuple<>> {
      ^bb0(%arg3: i6, %arg4: f64, %arg5: i6):
        %1 = cfg %arg3, %arg4, %arg5 : (i6, f64, i6) -> !hugr.sum<tuple<>, tuple<>> {
        ^bb0(%arg6: i6, %arg7: f64, %arg8: i6):
          %2:4 = dfg input extensions [] %arg6, %arg7, %arg8 : (i6, f64, i6) -> (!hugr.sum<tuple<>, tuple<>>, f64, i6, f64) {
          ^bb0(%arg9: i6, %arg10: f64, %arg11: i6):
            %19 = ext_op["arithmetic.conversions"] "convert_s" %arg9 : [](i6) -> f64
            %20 = ext_op["arithmetic.float"] "fdiv" %19, %arg10 : [](f64, f64) -> f64
            %21 = ext_op["arithmetic.float"] "ffloor" %20 : [](f64) -> f64
            const @const_32 : i6 = 3 : i6
            %22 = load_constant @const_32 : i6
            %23 = ext_op["arithmetic.int"] "imul" %22, %arg11 : [](i6, i6) -> i6
            %24 = ext_op["arithmetic.conversions"] "convert_s" %23 : [](i6) -> f64
            %25 = ext_op["arithmetic.float"] "fadd" %21, %24 : [](f64, f64) -> f64
            const @const_37 : i6 = 8 : i6
            %26 = load_constant @const_37 : i6
            %27 = ext_op["arithmetic.int"] "ineg" %26 : [](i6) -> i6
            %28 = ext_op["arithmetic.conversions"] "convert_s" %27 : [](i6) -> f64
            %29 = ext_op["arithmetic.float"] "fle" %25, %28 : [](f64, f64) -> !hugr.sum<tuple<>, tuple<>>
            output %29, %25, %arg9, %arg10 : !hugr.sum<tuple<>, tuple<>>, f64, i6, f64
          }
          switch %2#0, %2#1, %2#2, %2#3 : !hugr.sum<tuple<>, tuple<>>, f64, i6, f64 ^bb2, ^bb3
        ^bb1(%3: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb7
          output %3 : !hugr.sum<tuple<>, tuple<>>
        ^bb2(%4: f64, %5: i6, %6: f64):  // pred: ^bb0
          %7 = dfg input extensions [] %4, %5, %6 : (f64, i6, f64) -> !hugr.sum<tuple<>, tuple<f64, i6, f64>> {
          ^bb0(%arg9: f64, %arg10: i6, %arg11: f64):
            const @const_43 : i6 = 5 : i6
            %19 = load_constant @const_43 : i6
            %20 = ext_op["arithmetic.conversions"] "convert_s" %19 : [](i6) -> f64
            %21 = ext_op["arithmetic.float"] "fgt" %arg9, %20 : [](f64, f64) -> !hugr.sum<tuple<>, tuple<>>
            %22 = make_tuple()
            %23 = make_tuple(%arg9, %arg10, %arg11 : f64, i6, f64)
            %24 = conditional(%21, %22, %23 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<f64, i6, f64>) -> !hugr.sum<tuple<>, tuple<f64, i6, f64>> {
            ^bb0(%arg12: tuple<>, %arg13: tuple<f64, i6, f64>):
              %25 = dfg input extensions [] %arg12, %arg13 : (tuple<>, tuple<f64, i6, f64>) -> !hugr.sum<tuple<>, tuple<f64, i6, f64>> {
              ^bb0(%arg14: tuple<>, %arg15: tuple<f64, i6, f64>):
                %26 = tag 0 %arg14 : tuple<> -> <tuple<>, tuple<f64, i6, f64>>
                output %26 : !hugr.sum<tuple<>, tuple<f64, i6, f64>>
              }
              output %25 : !hugr.sum<tuple<>, tuple<f64, i6, f64>>
            }, {
            ^bb0(%arg12: tuple<>, %arg13: tuple<f64, i6, f64>):
              %25 = dfg input extensions [] %arg12, %arg13 : (tuple<>, tuple<f64, i6, f64>) -> !hugr.sum<tuple<>, tuple<f64, i6, f64>> {
              ^bb0(%arg14: tuple<>, %arg15: tuple<f64, i6, f64>):
                %26 = tag 1 %arg15 : tuple<f64, i6, f64> -> <tuple<>, tuple<f64, i6, f64>>
                output %26 : !hugr.sum<tuple<>, tuple<f64, i6, f64>>
              }
              output %25 : !hugr.sum<tuple<>, tuple<f64, i6, f64>>
            }
            output %24 : !hugr.sum<tuple<>, tuple<f64, i6, f64>>
          }
          switch %7 : !hugr.sum<tuple<>, tuple<f64, i6, f64>> ^bb4, ^bb3
        ^bb3(%8: f64, %9: i6, %10: f64):  // 2 preds: ^bb0, ^bb2
          %11 = dfg input extensions [] %8, %9, %10 : (f64, i6, f64) -> !hugr.sum<tuple<f64, i6>, tuple<>> {
          ^bb0(%arg9: f64, %arg10: i6, %arg11: f64):
            %19 = ext_op["arithmetic.conversions"] "convert_s" %arg10 : [](i6) -> f64
            %20 = ext_op["arithmetic.float"] "fmul" %19, %arg11 : [](f64, f64) -> f64
            const @const_57 : i6 = 0 : i6
            %21 = load_constant @const_57 : i6
            %22 = ext_op["arithmetic.conversions"] "convert_s" %21 : [](i6) -> f64
            %23 = ext_op["arithmetic.float"] "feq" %20, %22 : [](f64, f64) -> !hugr.sum<tuple<>, tuple<>>
            %24 = make_tuple(%arg9, %arg10 : f64, i6)
            %25 = make_tuple()
            %26 = conditional(%23, %24, %25 : !hugr.sum<tuple<>, tuple<>>, tuple<f64, i6>, tuple<>) -> !hugr.sum<tuple<f64, i6>, tuple<>> {
            ^bb0(%arg12: tuple<f64, i6>, %arg13: tuple<>):
              %27 = dfg input extensions [] %arg12, %arg13 : (tuple<f64, i6>, tuple<>) -> !hugr.sum<tuple<f64, i6>, tuple<>> {
              ^bb0(%arg14: tuple<f64, i6>, %arg15: tuple<>):
                %28 = tag 0 %arg14 : tuple<f64, i6> -> <tuple<f64, i6>, tuple<>>
                output %28 : !hugr.sum<tuple<f64, i6>, tuple<>>
              }
              output %27 : !hugr.sum<tuple<f64, i6>, tuple<>>
            }, {
            ^bb0(%arg12: tuple<f64, i6>, %arg13: tuple<>):
              %27 = dfg input extensions [] %arg12, %arg13 : (tuple<f64, i6>, tuple<>) -> !hugr.sum<tuple<f64, i6>, tuple<>> {
              ^bb0(%arg14: tuple<f64, i6>, %arg15: tuple<>):
                %28 = tag 1 %arg15 : tuple<> -> <tuple<f64, i6>, tuple<>>
                output %28 : !hugr.sum<tuple<f64, i6>, tuple<>>
              }
              output %27 : !hugr.sum<tuple<f64, i6>, tuple<>>
            }
            output %26 : !hugr.sum<tuple<f64, i6>, tuple<>>
          }
          switch %11 : !hugr.sum<tuple<f64, i6>, tuple<>> ^bb5, ^bb6
        ^bb4:  // 2 preds: ^bb2, ^bb5
          %12:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            const @const_69 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, #hugr.tuple : tuple<>> : !hugr.sum<tuple<>, tuple<>>
            %19 = load_constant @const_69 : !hugr.sum<tuple<>, tuple<>>
            %20 = make_tuple()
            %21 = tag 0 %20 : tuple<> -> <tuple<>>
            output %21, %19 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %12#0, %12#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
        ^bb5(%13: f64, %14: i6):  // pred: ^bb3
          %15 = dfg input extensions [] %13, %14 : (f64, i6) -> !hugr.sum<tuple<>, tuple<>> {
          ^bb0(%arg9: f64, %arg10: i6):
            const @const_74 : i6 = 3 : i6
            %19 = load_constant @const_74 : i6
            %20 = ext_op["arithmetic.conversions"] "convert_s" %19 : [](i6) -> f64
            %21 = ext_op["arithmetic.float"] "fdiv" %arg9, %20 : [](f64, f64) -> f64
            %22 = ext_op["arithmetic.float"] "ffloor" %21 : [](f64) -> f64
            %23 = ext_op["arithmetic.float"] "fmul" %22, %20 : [](f64, f64) -> f64
            %24 = ext_op["arithmetic.float"] "fsub" %arg9, %23 : [](f64, f64) -> f64
            %25 = ext_op["arithmetic.conversions"] "convert_s" %arg10 : [](i6) -> f64
            %26 = ext_op["arithmetic.float"] "flt" %24, %25 : [](f64, f64) -> !hugr.sum<tuple<>, tuple<>>
            output %26 : !hugr.sum<tuple<>, tuple<>>
          }
          switch %15 : !hugr.sum<tuple<>, tuple<>> ^bb4, ^bb6
        ^bb6:  // 2 preds: ^bb3, ^bb5
          %16:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            const @const_84 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<0, #hugr.tuple : tuple<>> : !hugr.sum<tuple<>, tuple<>>
            %19 = load_constant @const_84 : !hugr.sum<tuple<>, tuple<>>
            %20 = make_tuple()
            %21 = tag 0 %20 : tuple<> -> <tuple<>>
            output %21, %19 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %16#0, %16#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
        ^bb7(%17: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb4, ^bb6
          %18:2 = dfg input extensions [] %17 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg9: !hugr.sum<tuple<>, tuple<>>):
            %19 = make_tuple()
            %20 = tag 0 %19 : tuple<> -> <tuple<>>
            output %20, %arg9 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %18#0, %18#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
        }
        output %1 : !hugr.sum<tuple<>, tuple<>>
      }
      output %0 : !hugr.sum<tuple<>, tuple<>>
    }
  }
}

