---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_arith_big.json
---
module {
  hugr.module {
    func @arith[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg1: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %arg2: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
      %0 = dfg input extensions [] %arg0, %arg1, %arg2 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
      ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg4: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %arg5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = cfg %arg3, %arg4, %arg5 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
        ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg7: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %arg8: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
          %2:4 = dfg input extensions [] %arg6, %arg7, %arg8 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) {
          ^bb0(%arg9: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg10: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %arg11: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            %19 = ext_op []"convert_s" %arg9 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %20 = ext_op []"fdiv" %19, %arg10 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %21 = ext_op []"ffloor" %20 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            const @const_32 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 3 : i6
            %22 = load_constant @const_32 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %23 = ext_op []"imul" %22, %arg11 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %24 = ext_op []"convert_s" %23 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %25 = ext_op []"fadd" %21, %24 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            const @const_37 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 8 : i6
            %26 = load_constant @const_37 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %27 = ext_op []"ineg" %26 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %28 = ext_op []"convert_s" %27 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %29 = ext_op []"fle" %25, %28 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr.sum<tuple<>, tuple<>>
            output %29, %25, %arg9, %arg10 : !hugr.sum<tuple<>, tuple<>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
          }
          switch %2#0, %2#1, %2#2, %2#3 : !hugr.sum<tuple<>, tuple<>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]> ^bb2, ^bb3
        ^bb1(%3: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb7
          output %3 : !hugr.sum<tuple<>, tuple<>>
        ^bb2(%4: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %6: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>):  // pred: ^bb0
          %7 = dfg input extensions [] %4, %5, %6 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>> {
          ^bb0(%arg9: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %arg10: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg11: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>):
            const @const_43 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 5 : i6
            %19 = load_constant @const_43 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %20 = ext_op []"convert_s" %19 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %21 = ext_op []"fgt" %arg9, %20 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr.sum<tuple<>, tuple<>>
            %22 = make_tuple()
            %23 = make_tuple(%arg9, %arg10, %arg11 : !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>)
            %24 = conditional(%21, %22, %23 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>> {
            ^bb0(%arg12: tuple<>, %arg13: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>):
              %25 = dfg input extensions [] %arg12, %arg13 : (tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>> {
              ^bb0(%arg14: tuple<>, %arg15: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>):
                %26 = tag 0 %arg14 : tuple<> -> <tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>>
                output %26 : !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>>
              }
              output %25 : !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>>
            }, {
            ^bb0(%arg12: tuple<>, %arg13: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>):
              %25 = dfg input extensions [] %arg12, %arg13 : (tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>> {
              ^bb0(%arg14: tuple<>, %arg15: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>):
                %26 = tag 1 %arg15 : tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>> -> <tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>>
                output %26 : !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>>
              }
              output %25 : !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>>
            }
            output %24 : !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>>
          }
          switch %7 : !hugr.sum<tuple<>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>>> ^bb4, ^bb3
        ^bb3(%8: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %9: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %10: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>):  // 2 preds: ^bb0, ^bb2
          %11 = dfg input extensions [] %8, %9, %10 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
          ^bb0(%arg9: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %arg10: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg11: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>):
            %19 = ext_op []"convert_s" %arg10 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %20 = ext_op []"fmul" %19, %arg11 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            const @const_57 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
            %21 = load_constant @const_57 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %22 = ext_op []"convert_s" %21 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %23 = ext_op []"feq" %20, %22 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr.sum<tuple<>, tuple<>>
            %24 = make_tuple(%arg9, %arg10 : !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
            %25 = make_tuple()
            %26 = conditional(%23, %24, %25 : !hugr.sum<tuple<>, tuple<>>, tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
            ^bb0(%arg12: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg13: tuple<>):
              %27 = dfg input extensions [] %arg12, %arg13 : (tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
              ^bb0(%arg14: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg15: tuple<>):
                %28 = tag 0 %arg14 : tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
                output %28 : !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
              }
              output %27 : !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
            }, {
            ^bb0(%arg12: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg13: tuple<>):
              %27 = dfg input extensions [] %arg12, %arg13 : (tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
              ^bb0(%arg14: tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg15: tuple<>):
                %28 = tag 1 %arg15 : tuple<> -> <tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
                output %28 : !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
              }
              output %27 : !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
            }
            output %26 : !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
          }
          switch %11 : !hugr.sum<tuple<!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> ^bb5, ^bb6
        ^bb4:  // 2 preds: ^bb2, ^bb5
          %12:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            const @const_69 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, []> : !hugr.sum<tuple<>, tuple<>>
            %19 = load_constant @const_69 : !hugr.sum<tuple<>, tuple<>>
            %20 = make_tuple()
            %21 = tag 0 %20 : tuple<> -> <tuple<>>
            output %21, %19 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %12#0, %12#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
        ^bb5(%13: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %14: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb3
          %15 = dfg input extensions [] %13, %14 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
          ^bb0(%arg9: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, %arg10: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            const @const_74 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 3 : i6
            %19 = load_constant @const_74 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %20 = ext_op []"convert_s" %19 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %21 = ext_op []"fdiv" %arg9, %20 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %22 = ext_op []"ffloor" %21 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %23 = ext_op []"fmul" %22, %20 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %24 = ext_op []"fsub" %arg9, %23 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %25 = ext_op []"convert_s" %arg10 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %26 = ext_op []"flt" %24, %25 : (!hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) -> !hugr.sum<tuple<>, tuple<>>
            output %26 : !hugr.sum<tuple<>, tuple<>>
          }
          switch %15 : !hugr.sum<tuple<>, tuple<>> ^bb4, ^bb6
        ^bb6:  // 2 preds: ^bb3, ^bb5
          %16:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            const @const_84 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<0, []> : !hugr.sum<tuple<>, tuple<>>
            %19 = load_constant @const_84 : !hugr.sum<tuple<>, tuple<>>
            %20 = make_tuple()
            %21 = tag 0 %20 : tuple<> -> <tuple<>>
            output %21, %19 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %16#0, %16#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
        ^bb7(%17: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb4, ^bb6
          %18:2 = dfg input extensions [] %17 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg9: !hugr.sum<tuple<>, tuple<>>):
            %19 = make_tuple()
            %20 = tag 0 %19 : tuple<> -> <tuple<>>
            output %20, %arg9 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %18#0, %18#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
        }
        output %1 : !hugr.sum<tuple<>, tuple<>>
      }
      output %0 : !hugr.sum<tuple<>, tuple<>>
    }
  }
}

