---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_call_1.json
---
module {
  hugr.module {
    func @bar[]() -> !hugr.sum<tuple<>, tuple<>> {
      %0 = dfg input extensions []  : () -> !hugr.sum<tuple<>, tuple<>> {
        %1 = cfg : () -> !hugr.sum<tuple<>, tuple<>> {
          %2:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            const @const_23 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<0, []> : !hugr.sum<tuple<>, tuple<>>
            %4 = load_constant @const_23 : !hugr.sum<tuple<>, tuple<>>
            %5 = make_tuple()
            %6 = tag 0 %5 : tuple<> -> <tuple<>>
            output %6, %4 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
        ^bb1(%3: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
          output %3 : !hugr.sum<tuple<>, tuple<>>
        }
        output %1 : !hugr.sum<tuple<>, tuple<>>
      }
      output %0 : !hugr.sum<tuple<>, tuple<>>
    }
    func @foo[]() -> !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>> {
      %0 = dfg input extensions []  : () -> !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>> {
        %1 = cfg : () -> !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>> {
          %2:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>>) {
            %4 = load_constant @bar : !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>>
            %5 = make_tuple()
            %6 = tag 0 %5 : tuple<> -> <tuple<>>
            output %6, %4 : !hugr.sum<tuple<>>, !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>> ^bb1
        ^bb1(%3: !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>>):  // pred: ^bb0
          output %3 : !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>>
        }
        output %1 : !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>>
      }
      output %0 : !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>>
    }
    func @baz[]() -> !hugr.sum<tuple<>, tuple<>> {
      %0 = dfg input extensions []  : () -> !hugr.sum<tuple<>, tuple<>> {
        %1 = cfg : () -> !hugr.sum<tuple<>, tuple<>> {
          %2:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            %4 = call @foo  []() -> !hugr<function []() -> !hugr.sum<tuple<>, tuple<>>> 
            %5 = call %4  []() -> !hugr.sum<tuple<>, tuple<>> 
            %6 = make_tuple()
            %7 = tag 0 %6 : tuple<> -> <tuple<>>
            output %7, %5 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
        ^bb1(%3: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
          output %3 : !hugr.sum<tuple<>, tuple<>>
        }
        output %1 : !hugr.sum<tuple<>, tuple<>>
      }
      output %0 : !hugr.sum<tuple<>, tuple<>>
    }
  }
}

