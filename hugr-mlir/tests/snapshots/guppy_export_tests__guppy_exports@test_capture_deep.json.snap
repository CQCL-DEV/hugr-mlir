---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_capture_deep.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = dfg input extensions [] %arg0 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = cfg %arg1 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
        ^bb0(%arg2: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
          %2:2 = dfg input extensions [] %arg2 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            const @const_21 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 2 : i6
            %4 = load_constant @const_21 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %5 = ext_op []"imul" %arg3, %4 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            func @bar[](%arg4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              %11 = dfg input extensions [] %arg4, %arg5 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                %12 = cfg %arg6, %arg7 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                ^bb0(%arg8: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg9: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                  %13:2 = dfg input extensions [] %arg8, %arg9 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
                  ^bb0(%arg10: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg11: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                    const @const_26 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
                    %15 = load_constant @const_26 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %16 = ext_op []"iadd" %arg10, %15 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    func @baz[](%arg12: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg13: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg14: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg15: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                      %23 = dfg input extensions [] %arg12, %arg13, %arg14, %arg15 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                      ^bb0(%arg16: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg17: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg18: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg19: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                        %24 = cfg %arg16, %arg17, %arg18, %arg19 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                        ^bb0(%arg20: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg21: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg22: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg23: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                          %25:2 = dfg input extensions [] %arg20, %arg21, %arg22, %arg23 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
                          ^bb0(%arg24: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg25: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg26: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg27: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                            %27 = ext_op []"iadd" %arg24, %arg25 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                            %28 = ext_op []"iadd" %27, %arg27 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                            %29 = ext_op []"iadd" %28, %arg26 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                            %30 = make_tuple()
                            %31 = tag 0 %30 : tuple<> -> <tuple<>>
                            output %31, %29 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                          }
                          switch %25#0, %25#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
                        ^bb1(%26: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
                          output %26 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                        }
                        output %24 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                      }
                      output %23 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    }
                    %17 = load_constant @baz : !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
                    %18 = call @partial  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> %arg10, %16, %arg11, %17
                    %19 = ext_op []"imul" %16, %arg10 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %20 = call %18  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> %19
                    %21 = make_tuple()
                    %22 = tag 0 %21 : tuple<> -> <tuple<>>
                    output %22, %20 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                  }
                  switch %13#0, %13#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
                ^bb1(%14: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
                  output %14 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                }
                output %12 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
              }
              output %11 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            }
            %6 = load_constant @bar : !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
            %7 = call @partial$1  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr<function []() -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> %5, %arg3, %6
            %8 = call %7  []() -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> 
            %9 = make_tuple()
            %10 = tag 0 %9 : tuple<> -> <tuple<>>
            output %10, %8 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
        ^bb1(%3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
          output %3 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        }
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
    func @partial[](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
    func @partial$1[](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr<function []() -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
  }
}

