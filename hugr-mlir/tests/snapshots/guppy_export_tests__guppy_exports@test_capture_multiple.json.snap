---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_capture_multiple.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = dfg input extensions [] %arg0 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = cfg %arg1 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
        ^bb0(%arg2: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
          %2:2 = dfg input extensions [] %arg2 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            const @const_21 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 5 : i6
            %11 = load_constant @const_21 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %12 = ext_op []"igt_s" %arg3, %11 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
            output %12, %arg3 : !hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb2, ^bb3
        ^bb1(%3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb4
          output %3 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        ^bb2(%4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
          %5:3 = dfg input extensions [] %4 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            const @const_25 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 3 : i6
            %11 = load_constant @const_25 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %12 = make_tuple()
            %13 = tag 0 %12 : tuple<> -> <tuple<>>
            output %13, %arg3, %11 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %5#0, %5#1, %5#2 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb4
        ^bb3(%6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
          %7:3 = dfg input extensions [] %6 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            const @const_30 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 2 : i6
            %11 = load_constant @const_30 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %12 = ext_op []"imul" %11, %arg3 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %13 = make_tuple()
            %14 = tag 0 %13 : tuple<> -> <tuple<>>
            output %14, %arg3, %12 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %7#0, %7#1, %7#2 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb4
        ^bb4(%8: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %9: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // 2 preds: ^bb2, ^bb3
          %10:2 = dfg input extensions [] %8, %9 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            %11 = ext_op []"iadd" %arg3, %arg4 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            func @bar[](%arg5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              %17 = dfg input extensions [] %arg5, %arg6 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              ^bb0(%arg7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg8: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                %18 = cfg %arg7, %arg8 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                ^bb0(%arg9: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg10: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                  %19:2 = dfg input extensions [] %arg9, %arg10 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
                  ^bb0(%arg11: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg12: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                    %21 = ext_op []"iadd" %arg11, %arg12 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %22 = make_tuple()
                    %23 = tag 0 %22 : tuple<> -> <tuple<>>
                    output %23, %21 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                  }
                  switch %19#0, %19#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
                ^bb1(%20: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
                  output %20 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                }
                output %18 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
              }
              output %17 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            }
            %12 = load_constant @bar : !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
            %13 = call @partial  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr<function []() -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> %arg4, %11, %12
            %14 = call %13  []() -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> 
            %15 = make_tuple()
            %16 = tag 0 %15 : tuple<> -> <tuple<>>
            output %16, %14 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %10#0, %10#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
        }
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
    func @partial[](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr<function []() -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
  }
}

