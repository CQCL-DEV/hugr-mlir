---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_constant.json
---
module {
  hugr.module {
    func @const[]() -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]> {
      %0 = dfg input extensions []  : () -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]> {
        %1 = cfg : () -> !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]> {
          %2:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>) {
            const @const_9 : !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]> = 4.200000e+01 : f64
            %4 = load_constant @const_9 : !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
            %5 = make_tuple()
            %6 = tag 0 %5 : tuple<> -> <tuple<>>
            output %6, %4 : !hugr.sum<tuple<>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]> ^bb1
        ^bb1(%3: !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>):  // pred: ^bb0
          output %3 : !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
        }
        output %1 : !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
      }
      output %0 : !hugr<opaque "float64"["arithmetic.float.types"] [Copyable]>
    }
  }
}

