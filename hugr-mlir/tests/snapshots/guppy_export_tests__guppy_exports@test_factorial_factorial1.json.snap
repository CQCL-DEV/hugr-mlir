---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_factorial_factorial1.json
---
module {
  hugr.module {
    func @factorial1[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = cfg %arg0 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        const @const_19 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
        %1 = load_constant @const_19 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %2 = make_tuple()
        %3 = tag 0 %2 : tuple<> -> <tuple<>>
        switch %3, %1, %arg1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb2
      ^bb1(%4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb4
        output %4 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      ^bb2(%5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // 2 preds: ^bb0, ^bb3
        const @const_24 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
        %7 = load_constant @const_24 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %8 = ext_op []"igt_s" %6, %7 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
        %9 = make_tuple(%5, %6 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
        %10 = make_tuple(%5 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
        %11 = conditional(%8, %9, %10 : !hugr.sum<tuple<>, tuple<>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> {
        ^bb0(%arg2: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg3: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
          %22 = tag 0 %arg2 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
          output %22 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
        }, {
        ^bb0(%arg2: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg3: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
          %22 = tag 1 %arg3 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
          output %22 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
        }
        switch %11 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> ^bb3, ^bb4
      ^bb3(%12: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %13: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb2
        %14 = ext_op []"imul" %12, %13 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        const @const_36 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
        %15 = load_constant @const_36 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %16 = ext_op []"isub" %13, %15 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %17 = make_tuple()
        %18 = tag 0 %17 : tuple<> -> <tuple<>>
        switch %18, %14, %16 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb2
      ^bb4(%19: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb2
        %20 = make_tuple()
        %21 = tag 0 %20 : tuple<> -> <tuple<>>
        switch %21, %19 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

