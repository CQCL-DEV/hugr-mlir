---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_if_expr_assign_cond.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>) -> !hugr.sum<tuple<>, tuple<>> {
      %0 = dfg input extensions [] %arg0 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr.sum<tuple<>, tuple<>> {
      ^bb0(%arg1: !hugr.sum<tuple<>, tuple<>>):
        %1 = cfg %arg1 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr.sum<tuple<>, tuple<>> {
        ^bb0(%arg2: !hugr.sum<tuple<>, tuple<>>):
          %2 = dfg input extensions [] %arg2 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>> {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            %9 = make_tuple(%arg3 : !hugr.sum<tuple<>, tuple<>>)
            %10 = make_tuple()
            %11 = conditional(%arg3, %9, %10 : !hugr.sum<tuple<>, tuple<>>, tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>) -> !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>> {
            ^bb0(%arg4: tuple<!hugr.sum<tuple<>, tuple<>>>, %arg5: tuple<>):
              %12 = dfg input extensions [] %arg4, %arg5 : (tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>) -> !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>> {
              ^bb0(%arg6: tuple<!hugr.sum<tuple<>, tuple<>>>, %arg7: tuple<>):
                %13 = tag 0 %arg6 : tuple<!hugr.sum<tuple<>, tuple<>>> -> <tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>>
                output %13 : !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>>
              }
              output %12 : !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>>
            }, {
            ^bb0(%arg4: tuple<!hugr.sum<tuple<>, tuple<>>>, %arg5: tuple<>):
              %12 = dfg input extensions [] %arg4, %arg5 : (tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>) -> !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>> {
              ^bb0(%arg6: tuple<!hugr.sum<tuple<>, tuple<>>>, %arg7: tuple<>):
                %13 = tag 1 %arg7 : tuple<> -> <tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>>
                output %13 : !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>>
              }
              output %12 : !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>>
            }
            output %11 : !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>>
          }
          switch %2 : !hugr.sum<tuple<!hugr.sum<tuple<>, tuple<>>>, tuple<>> ^bb2, ^bb3
        ^bb1(%3: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb4
          output %3 : !hugr.sum<tuple<>, tuple<>>
        ^bb2(%4: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
          %5:2 = dfg input extensions [] %4 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            %9 = make_tuple()
            %10 = tag 0 %9 : tuple<> -> <tuple<>>
            output %10, %arg3 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %5#0, %5#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb4
        ^bb3:  // pred: ^bb0
          %6:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            const @const_30 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<0, []> : !hugr.sum<tuple<>, tuple<>>
            %9 = load_constant @const_30 : !hugr.sum<tuple<>, tuple<>>
            %10 = make_tuple()
            %11 = tag 0 %10 : tuple<> -> <tuple<>>
            output %11, %9 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %6#0, %6#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb4
        ^bb4(%7: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb2, ^bb3
          %8:2 = dfg input extensions [] %7 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            %9 = make_tuple()
            %10 = tag 0 %9 : tuple<> -> <tuple<>>
            output %10, %arg3 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %8#0, %8#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
        }
        output %1 : !hugr.sum<tuple<>, tuple<>>
      }
      output %0 : !hugr.sum<tuple<>, tuple<>>
    }
  }
}

