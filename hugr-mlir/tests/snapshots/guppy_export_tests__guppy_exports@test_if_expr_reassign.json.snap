---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_if_expr_reassign.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = dfg input extensions [] %arg0 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr.sum<tuple<>, tuple<>>):
        %1 = cfg %arg1 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
        ^bb0(%arg2: !hugr.sum<tuple<>, tuple<>>):
          %2:2 = dfg input extensions [] %arg2 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            const @const_27 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 5 : i6
            %20 = load_constant @const_27 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            output %arg3, %arg3 : !hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb2, ^bb3
        ^bb1(%3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb10
          output %3 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        ^bb2(%4: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
          %5:2 = dfg input extensions [] %4 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            const @const_30 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
            %20 = load_constant @const_30 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %21 = make_tuple()
            %22 = tag 0 %21 : tuple<> -> <tuple<>>
            output %22, %arg3 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %5#0, %5#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb4
        ^bb3(%6: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
          %7:2 = dfg input extensions [] %6 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            const @const_35 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 6 : i6
            %20 = load_constant @const_35 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %21 = make_tuple()
            %22 = tag 0 %21 : tuple<> -> <tuple<>>
            output %22, %arg3 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %7#0, %7#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb4
        ^bb4(%8: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb2, ^bb3
          %9:2 = dfg input extensions [] %8 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            output %arg3, %arg3 : !hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %9#0, %9#1 : !hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb5, ^bb6
        ^bb5(%10: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb4
          %11:2 = dfg input extensions [] %10 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            const @const_41 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 6 : i6
            %20 = load_constant @const_41 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %21 = make_tuple()
            %22 = tag 0 %21 : tuple<> -> <tuple<>>
            output %22, %arg3 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %11#0, %11#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
        ^bb6(%12: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb4
          %13:2 = dfg input extensions [] %12 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            const @const_46 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 2 : i6
            %20 = load_constant @const_46 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %21 = make_tuple()
            %22 = tag 0 %21 : tuple<> -> <tuple<>>
            output %22, %arg3 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %13#0, %13#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
        ^bb7(%14: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb5, ^bb6
          %15 = dfg input extensions [] %14 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr.sum<tuple<>, tuple<>> {
          ^bb0(%arg3: !hugr.sum<tuple<>, tuple<>>):
            output %arg3 : !hugr.sum<tuple<>, tuple<>>
          }
          switch %15 : !hugr.sum<tuple<>, tuple<>> ^bb8, ^bb9
        ^bb8:  // pred: ^bb7
          %16:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
            const @const_52 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 3 : i6
            %20 = load_constant @const_52 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %21 = make_tuple()
            %22 = tag 0 %21 : tuple<> -> <tuple<>>
            output %22, %20 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %16#0, %16#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb10
        ^bb9:  // pred: ^bb7
          %17:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
            const @const_57 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 4 : i6
            %20 = load_constant @const_57 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %21 = make_tuple()
            %22 = tag 0 %21 : tuple<> -> <tuple<>>
            output %22, %20 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %17#0, %17#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb10
        ^bb10(%18: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // 2 preds: ^bb8, ^bb9
          %19:2 = dfg input extensions [] %18 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            %20 = make_tuple()
            %21 = tag 0 %20 : tuple<> -> <tuple<>>
            output %21, %arg3 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %19#0, %19#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
        }
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

