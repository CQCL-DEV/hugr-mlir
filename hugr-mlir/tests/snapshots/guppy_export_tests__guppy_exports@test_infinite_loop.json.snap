---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_infinite_loop.json
---
module {
  hugr.module {
    func @foo[]() -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = dfg input extensions []  : () -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
        %1 = cfg : () -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
          %2 = dfg input extensions []  : () -> !hugr.sum<tuple<>> {
            %7 = make_tuple()
            %8 = tag 0 %7 : tuple<> -> <tuple<>>
            output %8 : !hugr.sum<tuple<>>
          }
          switch %2 : !hugr.sum<tuple<>> ^bb2
        ^bb1(%3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb4
          output %3 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        ^bb2:  // 2 preds: ^bb0, ^bb3
          %4 = dfg input extensions []  : () -> !hugr.sum<tuple<>, tuple<>> {
            const @const_18 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, []> : !hugr.sum<tuple<>, tuple<>>
            %7 = load_constant @const_18 : !hugr.sum<tuple<>, tuple<>>
            output %7 : !hugr.sum<tuple<>, tuple<>>
          }
          switch %4 : !hugr.sum<tuple<>, tuple<>> ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %5 = dfg input extensions []  : () -> !hugr.sum<tuple<>> {
            %7 = make_tuple()
            %8 = tag 0 %7 : tuple<> -> <tuple<>>
            output %8 : !hugr.sum<tuple<>>
          }
          switch %5 : !hugr.sum<tuple<>> ^bb2
        ^bb4:  // pred: ^bb2
          %6:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
            const @const_24 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
            %7 = load_constant @const_24 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %8 = make_tuple()
            %9 = tag 0 %8 : tuple<> -> <tuple<>>
            output %9, %7 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %6#0, %6#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
        }
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

