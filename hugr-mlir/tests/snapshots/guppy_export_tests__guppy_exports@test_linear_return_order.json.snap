---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_linear_return_order.json
---
module {
  hugr.module {
    func @test[](%arg0: !hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>) {
      %0:2 = dfg input extensions [] %arg0 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>) {
      ^bb0(%arg1: !hugr<opaque "qubit"["prelude"] [Linear]>):
        %1:2 = cfg %arg1 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>) {
        ^bb0(%arg2: !hugr<opaque "qubit"["prelude"] [Linear]>):
          %2:3 = dfg input extensions [] %arg2 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg3: !hugr<opaque "qubit"["prelude"] [Linear]>):
            %5:2 = ext_op []"Measure" %arg3 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>)
            %6 = make_tuple(%5#0, %5#1 : !hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>)
            %7:2 = unpack_tuple %6 : tuple<!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>>
            %8 = make_tuple()
            %9 = tag 0 %8 : tuple<> -> <tuple<>>
            output %9, %7#0, %7#1 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %2#0, %2#1, %2#2 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>> ^bb1
        ^bb1(%3: !hugr<opaque "qubit"["prelude"] [Linear]>, %4: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
          output %3, %4 : !hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>
        }
        output %1#0, %1#1 : !hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>
      }
      output %0#0, %0#1 : !hugr<opaque "qubit"["prelude"] [Linear]>, !hugr.sum<tuple<>, tuple<>>
    }
  }
}

