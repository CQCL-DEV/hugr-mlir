---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_nested_deep.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = dfg input extensions [] %arg0 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = cfg %arg1 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
        ^bb0(%arg2: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
          %2:2 = dfg input extensions [] %arg2 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            func @bar[](%arg4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              %10 = dfg input extensions [] %arg4 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              ^bb0(%arg5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                %11 = cfg %arg5 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                  %12:2 = dfg input extensions [] %arg6 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
                  ^bb0(%arg7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                    func @baz[](%arg8: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                      %20 = dfg input extensions [] %arg8 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                      ^bb0(%arg9: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                        %21 = cfg %arg9 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                        ^bb0(%arg10: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                          %22:2 = dfg input extensions [] %arg10 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
                          ^bb0(%arg11: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                            const @const_25 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
                            %24 = load_constant @const_25 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                            %25 = ext_op []"isub" %arg11, %24 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                            %26 = make_tuple()
                            %27 = tag 0 %26 : tuple<> -> <tuple<>>
                            output %27, %25 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                          }
                          switch %22#0, %22#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
                        ^bb1(%23: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
                          output %23 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                        }
                        output %21 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                      }
                      output %20 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    }
                    %14 = load_constant @baz : !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
                    const @const_31 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 5 : i6
                    %15 = load_constant @const_31 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %16 = ext_op []"imul" %15, %arg7 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %17 = call %14  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> %16
                    %18 = make_tuple()
                    %19 = tag 0 %18 : tuple<> -> <tuple<>>
                    output %19, %17 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                  }
                  switch %12#0, %12#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
                ^bb1(%13: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
                  output %13 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                }
                output %11 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
              }
              output %10 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            }
            %4 = load_constant @bar : !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
            const @const_38 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
            %5 = load_constant @const_38 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %6 = ext_op []"iadd" %arg3, %5 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %7 = call %4  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> %6
            %8 = make_tuple()
            %9 = tag 0 %8 : tuple<> -> <tuple<>>
            output %9, %7 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
        ^bb1(%3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
          output %3 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        }
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

