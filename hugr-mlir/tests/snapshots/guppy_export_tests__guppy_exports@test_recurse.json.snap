---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_recurse.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = dfg input extensions [] %arg0 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = cfg %arg1 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
        ^bb0(%arg2: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
          %2:2 = dfg input extensions [] %arg2 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
          ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            func @bar[](%arg4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              %8 = dfg input extensions [] %arg4 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
              ^bb0(%arg5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                %9 = cfg %arg5 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
                ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                  %10 = dfg input extensions [] %arg6 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> {
                  ^bb0(%arg7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                    const @const_25 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
                    %15 = load_constant @const_25 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %16 = ext_op []"ieq" %arg7, %15 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
                    %17 = make_tuple()
                    %18 = make_tuple(%arg7 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
                    %19 = conditional(%16, %17, %18 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> {
                    ^bb0(%arg8: tuple<>, %arg9: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
                      %20 = dfg input extensions [] %arg8, %arg9 : (tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> {
                      ^bb0(%arg10: tuple<>, %arg11: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
                        %21 = tag 0 %arg10 : tuple<> -> <tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
                        output %21 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
                      }
                      output %20 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
                    }, {
                    ^bb0(%arg8: tuple<>, %arg9: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
                      %20 = dfg input extensions [] %arg8, %arg9 : (tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> {
                      ^bb0(%arg10: tuple<>, %arg11: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
                        %21 = tag 1 %arg11 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
                        output %21 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
                      }
                      output %20 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
                    }
                    output %19 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
                  }
                  switch %10 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> ^bb2, ^bb3
                ^bb1(%11: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // 2 preds: ^bb2, ^bb3
                  output %11 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                ^bb2:  // pred: ^bb0
                  %12:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
                    const @const_36 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
                    %15 = load_constant @const_36 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %16 = make_tuple()
                    %17 = tag 0 %16 : tuple<> -> <tuple<>>
                    output %17, %15 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                  }
                  switch %12#0, %12#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
                ^bb3(%13: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
                  %14:2 = dfg input extensions [] %13 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) {
                  ^bb0(%arg7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
                    const @const_41 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 2 : i6
                    %15 = load_constant @const_41 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    const @const_43 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
                    %16 = load_constant @const_43 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %17 = ext_op []"isub" %arg7, %16 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %18 = call @bar  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> %17
                    %19 = ext_op []"imul" %15, %18 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                    %20 = make_tuple()
                    %21 = tag 0 %20 : tuple<> -> <tuple<>>
                    output %21, %19 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
                  }
                  switch %14#0, %14#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
                }
                output %9 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
              }
              output %8 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            }
            %4 = load_constant @bar : !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>
            %5 = call %4  [](!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> %arg3
            %6 = make_tuple()
            %7 = tag 0 %6 : tuple<> -> <tuple<>>
            output %7, %5 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
        ^bb1(%3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
          output %3 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        }
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

