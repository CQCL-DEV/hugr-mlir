---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_return_call.json
---
module {
  hugr.module {
    func @op[](!hugr<opaque "qubit"["prelude"] [Linear]>) -> !hugr<opaque "qubit"["prelude"] [Linear]>
    func @test[](%arg0: !hugr<opaque "qubit"["prelude"] [Linear]>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
      %0 = dfg input extensions [] %arg0 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
      ^bb0(%arg1: !hugr<opaque "qubit"["prelude"] [Linear]>):
        %1 = cfg %arg1 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
        ^bb0(%arg2: !hugr<opaque "qubit"["prelude"] [Linear]>):
          %2:2 = dfg input extensions [] %arg2 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>) {
          ^bb0(%arg3: !hugr<opaque "qubit"["prelude"] [Linear]>):
            %4 = call @op  [](!hugr<opaque "qubit"["prelude"] [Linear]>) -> !hugr<opaque "qubit"["prelude"] [Linear]> %arg3
            %5 = make_tuple()
            %6 = tag 0 %5 : tuple<> -> <tuple<>>
            output %6, %4 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>
          }
          switch %2#0, %2#1 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb1
        ^bb1(%3: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb0
          output %3 : !hugr<opaque "qubit"["prelude"] [Linear]>
        }
        output %1 : !hugr<opaque "qubit"["prelude"] [Linear]>
      }
      output %0 : !hugr<opaque "qubit"["prelude"] [Linear]>
    }
  }
}

