---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_shortcircuit_assign4.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>, %arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
      %0 = dfg input extensions [] %arg0, %arg1 : (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
      ^bb0(%arg2: !hugr.sum<tuple<>, tuple<>>, %arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = cfg %arg2, %arg3 : (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
        ^bb0(%arg4: !hugr.sum<tuple<>, tuple<>>, %arg5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
          %2 = dfg input extensions [] %arg4, %arg5 : (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
          ^bb0(%arg6: !hugr.sum<tuple<>, tuple<>>, %arg7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            const @const_23 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
            %9 = load_constant @const_23 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %10 = ext_op []"igt_s" %arg7, %9 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
            %11 = make_tuple()
            %12 = make_tuple(%arg6 : !hugr.sum<tuple<>, tuple<>>)
            %13 = conditional(%10, %11, %12 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
            ^bb0(%arg8: tuple<>, %arg9: tuple<!hugr.sum<tuple<>, tuple<>>>):
              %14 = dfg input extensions [] %arg8, %arg9 : (tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
              ^bb0(%arg10: tuple<>, %arg11: tuple<!hugr.sum<tuple<>, tuple<>>>):
                %15 = tag 0 %arg10 : tuple<> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
                output %15 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
              }
              output %14 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
            }, {
            ^bb0(%arg8: tuple<>, %arg9: tuple<!hugr.sum<tuple<>, tuple<>>>):
              %14 = dfg input extensions [] %arg8, %arg9 : (tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
              ^bb0(%arg10: tuple<>, %arg11: tuple<!hugr.sum<tuple<>, tuple<>>>):
                %15 = tag 1 %arg11 : tuple<!hugr.sum<tuple<>, tuple<>>> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
                output %15 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
              }
              output %14 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
            }
            output %13 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
          }
          switch %2 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> ^bb2, ^bb3
        ^bb1(%3: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb2, ^bb4
          output %3 : !hugr.sum<tuple<>, tuple<>>
        ^bb2:  // 2 preds: ^bb0, ^bb3
          %4:2 = dfg input extensions []  : () -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
            const @const_34 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<0, []> : !hugr.sum<tuple<>, tuple<>>
            %9 = load_constant @const_34 : !hugr.sum<tuple<>, tuple<>>
            %10 = make_tuple()
            %11 = tag 0 %10 : tuple<> -> <tuple<>>
            output %11, %9 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %4#0, %4#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
        ^bb3(%5: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
          %6 = dfg input extensions [] %5 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
          ^bb0(%arg6: !hugr.sum<tuple<>, tuple<>>):
            %9 = make_tuple()
            %10 = make_tuple(%arg6 : !hugr.sum<tuple<>, tuple<>>)
            %11 = conditional(%arg6, %9, %10 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
            ^bb0(%arg7: tuple<>, %arg8: tuple<!hugr.sum<tuple<>, tuple<>>>):
              %12 = dfg input extensions [] %arg7, %arg8 : (tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
              ^bb0(%arg9: tuple<>, %arg10: tuple<!hugr.sum<tuple<>, tuple<>>>):
                %13 = tag 0 %arg9 : tuple<> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
                output %13 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
              }
              output %12 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
            }, {
            ^bb0(%arg7: tuple<>, %arg8: tuple<!hugr.sum<tuple<>, tuple<>>>):
              %12 = dfg input extensions [] %arg7, %arg8 : (tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
              ^bb0(%arg9: tuple<>, %arg10: tuple<!hugr.sum<tuple<>, tuple<>>>):
                %13 = tag 1 %arg10 : tuple<!hugr.sum<tuple<>, tuple<>>> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
                output %13 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
              }
              output %12 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
            }
            output %11 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
          }
          switch %6 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> ^bb2, ^bb4
        ^bb4(%7: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb3
          %8:2 = dfg input extensions [] %7 : (!hugr.sum<tuple<>, tuple<>>) -> (!hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>) {
          ^bb0(%arg6: !hugr.sum<tuple<>, tuple<>>):
            %9 = make_tuple()
            %10 = tag 0 %9 : tuple<> -> <tuple<>>
            output %10, %arg6 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>>
          }
          switch %8#0, %8#1 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
        }
        output %1 : !hugr.sum<tuple<>, tuple<>>
      }
      output %0 : !hugr.sum<tuple<>, tuple<>>
    }
  }
}

