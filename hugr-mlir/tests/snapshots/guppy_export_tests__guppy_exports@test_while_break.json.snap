---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_while_break.json
---
module {
  hugr.module {
    func @test[](%arg0: !hugr<opaque "qubit"["prelude"] [Linear]>, %arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
      %0 = cfg %arg0, %arg1 : (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
      ^bb0(%arg2: !hugr<opaque "qubit"["prelude"] [Linear]>, %arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = make_tuple()
        %2 = tag 0 %1 : tuple<> -> <tuple<>>
        switch %2, %arg3, %arg2 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb2
      ^bb1(%3: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb4
        output %3 : !hugr<opaque "qubit"["prelude"] [Linear]>
      ^bb2(%4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %5: !hugr<opaque "qubit"["prelude"] [Linear]>):  // 2 preds: ^bb0, ^bb6
        const @const_30 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
        %6 = load_constant @const_30 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %7 = ext_op []"igt_s" %4, %6 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
        %8 = make_tuple(%4 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
        %9 = make_tuple()
        %10 = conditional(%7, %8, %9 : !hugr.sum<tuple<>, tuple<>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
        ^bb0(%arg4: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg5: tuple<>):
          %31 = tag 0 %arg4 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
          output %31 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
        }, {
        ^bb0(%arg4: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg5: tuple<>):
          %31 = tag 1 %arg5 : tuple<> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
          output %31 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
        }
        switch %10, %5 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb3, ^bb4
      ^bb3(%11: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %12: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb2
        const @const_41 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
        %13 = load_constant @const_41 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %14 = ext_op []"isub" %11, %13 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %15 = ext_op []"H" %12 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> !hugr<opaque "qubit"["prelude"] [Linear]>
        const @const_45 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 5 : i6
        %16 = load_constant @const_45 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %17 = ext_op []"ilt_s" %14, %16 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
        %18 = make_tuple()
        %19 = make_tuple(%14 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
        %20 = conditional(%17, %18, %19 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>) -> !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>> {
        ^bb0(%arg4: tuple<>, %arg5: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
          %31 = tag 0 %arg4 : tuple<> -> <tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
          output %31 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
        }, {
        ^bb0(%arg4: tuple<>, %arg5: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>):
          %31 = tag 1 %arg5 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
          output %31 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>
        }
        switch %20, %15 : !hugr.sum<tuple<>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb5, ^bb6
      ^bb4(%21: !hugr<opaque "qubit"["prelude"] [Linear]>):  // 2 preds: ^bb2, ^bb5
        %22 = make_tuple()
        %23 = tag 0 %22 : tuple<> -> <tuple<>>
        switch %23, %21 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb1
      ^bb5(%24: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb3
        %25 = make_tuple()
        %26 = tag 0 %25 : tuple<> -> <tuple<>>
        switch %26, %24 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb4
      ^bb6(%27: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %28: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb3
        %29 = make_tuple()
        %30 = tag 0 %29 : tuple<> -> <tuple<>>
        switch %30, %27, %28 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb2
      }
      output %0 : !hugr<opaque "qubit"["prelude"] [Linear]>
    }
  }
}

