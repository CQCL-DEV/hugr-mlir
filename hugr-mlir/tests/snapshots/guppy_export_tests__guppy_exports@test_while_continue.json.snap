---
source: hugr-mlir/tests/guppy_export_tests.rs
expression: mlir_mod.as_operation()
input_file: hugr-mlir/tests/guppy-exports/test_while_continue.json
---
module {
  hugr.module {
    func @test[](%arg0: !hugr<opaque "qubit"["prelude"] [Linear]>, %arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
      %0 = dfg input extensions [] %arg0, %arg1 : (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
      ^bb0(%arg2: !hugr<opaque "qubit"["prelude"] [Linear]>, %arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        %1 = cfg %arg2, %arg3 : (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "qubit"["prelude"] [Linear]> {
        ^bb0(%arg4: !hugr<opaque "qubit"["prelude"] [Linear]>, %arg5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
          %2:3 = dfg input extensions [] %arg4, %arg5 : (!hugr<opaque "qubit"["prelude"] [Linear]>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) {
          ^bb0(%arg6: !hugr<opaque "qubit"["prelude"] [Linear]>, %arg7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
            %18 = make_tuple()
            %19 = tag 0 %18 : tuple<> -> <tuple<>>
            output %19, %arg7, %arg6 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>
          }
          switch %2#0, %2#1, %2#2 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb2
        ^bb1(%3: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb4
          output %3 : !hugr<opaque "qubit"["prelude"] [Linear]>
        ^bb2(%4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %5: !hugr<opaque "qubit"["prelude"] [Linear]>):  // 3 preds: ^bb0, ^bb5, ^bb6
          %6:2 = dfg input extensions [] %4, %5 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>) {
          ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg7: !hugr<opaque "qubit"["prelude"] [Linear]>):
            const @const_26 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
            %18 = load_constant @const_26 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %19 = ext_op []"igt_s" %arg6, %18 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
            %20 = make_tuple(%arg6 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
            %21 = make_tuple()
            %22 = conditional(%19, %20, %21 : !hugr.sum<tuple<>, tuple<>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
            ^bb0(%arg8: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg9: tuple<>):
              %23 = dfg input extensions [] %arg8, %arg9 : (tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
              ^bb0(%arg10: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg11: tuple<>):
                %24 = tag 0 %arg10 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
                output %24 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
              }
              output %23 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
            }, {
            ^bb0(%arg8: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg9: tuple<>):
              %23 = dfg input extensions [] %arg8, %arg9 : (tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
              ^bb0(%arg10: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg11: tuple<>):
                %24 = tag 1 %arg11 : tuple<> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
                output %24 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
              }
              output %23 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
            }
            output %22, %arg7 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>
          }
          switch %6#0, %6#1 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb3, ^bb4
        ^bb3(%7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %8: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb2
          %9:3 = dfg input extensions [] %7, %8 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) {
          ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg7: !hugr<opaque "qubit"["prelude"] [Linear]>):
            const @const_37 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
            %18 = load_constant @const_37 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %19 = ext_op []"isub" %arg6, %18 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            const @const_40 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 3 : i6
            %20 = load_constant @const_40 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %21 = ext_op []"imod_s" %19, %20 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            const @const_43 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
            %22 = load_constant @const_43 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
            %23 = ext_op []"ieq" %21, %22 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
            output %23, %19, %arg7 : !hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>
          }
          switch %9#0, %9#1, %9#2 : !hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb5, ^bb6
        ^bb4(%10: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb2
          %11:2 = dfg input extensions [] %10 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>) {
          ^bb0(%arg6: !hugr<opaque "qubit"["prelude"] [Linear]>):
            %18 = make_tuple()
            %19 = tag 0 %18 : tuple<> -> <tuple<>>
            output %19, %arg6 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]>
          }
          switch %11#0, %11#1 : !hugr.sum<tuple<>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb1
        ^bb5(%12: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %13: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb3
          %14:3 = dfg input extensions [] %12, %13 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) {
          ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg7: !hugr<opaque "qubit"["prelude"] [Linear]>):
            %18 = make_tuple()
            %19 = tag 0 %18 : tuple<> -> <tuple<>>
            output %19, %arg6, %arg7 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>
          }
          switch %14#0, %14#1, %14#2 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb2
        ^bb6(%15: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %16: !hugr<opaque "qubit"["prelude"] [Linear]>):  // pred: ^bb3
          %17:3 = dfg input extensions [] %15, %16 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) -> (!hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>) {
          ^bb0(%arg6: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, %arg7: !hugr<opaque "qubit"["prelude"] [Linear]>):
            %18 = ext_op []"H" %arg7 : (!hugr<opaque "qubit"["prelude"] [Linear]>) -> !hugr<opaque "qubit"["prelude"] [Linear]>
            %19 = make_tuple()
            %20 = tag 0 %19 : tuple<> -> <tuple<>>
            output %20, %arg6, %18 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]>
          }
          switch %17#0, %17#1, %17#2 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "qubit"["prelude"] [Linear]> ^bb2
        }
        output %1 : !hugr<opaque "qubit"["prelude"] [Linear]>
      }
      output %0 : !hugr<opaque "qubit"["prelude"] [Linear]>
    }
  }
}

