---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_break_different_types2.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = cfg %arg0 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        const @const_27 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
        %1 = load_constant @const_27 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %2 = make_tuple()
        %3 = tag 0 %2 : tuple<> -> <tuple<>>
        switch %3, %arg1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb2
      ^bb1(%4: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb4
        output %4 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      ^bb2(%5: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // 2 preds: ^bb0, ^bb5
        const @const_32 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, []> : !hugr.sum<tuple<>, tuple<>>
        %6 = load_constant @const_32 : !hugr.sum<tuple<>, tuple<>>
        %7 = make_tuple(%5 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
        %8 = make_tuple()
        %9 = conditional(%6, %7, %8 : !hugr.sum<tuple<>, tuple<>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
        ^bb0(%arg2: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg3: tuple<>):
          %27 = tag 0 %arg2 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
          output %27 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
        }, {
        ^bb0(%arg2: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg3: tuple<>):
          %27 = tag 1 %arg3 : tuple<> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
          output %27 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
        }
        switch %9 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> ^bb3, ^bb4
      ^bb3(%10: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb2
        const @const_42 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 5 : i6
        %11 = load_constant @const_42 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %12 = ext_op []"igt_s" %10, %11 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
        %13 = make_tuple(%10 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>)
        %14 = make_tuple()
        %15 = conditional(%12, %13, %14 : !hugr.sum<tuple<>, tuple<>>, tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>) -> !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> {
        ^bb0(%arg2: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg3: tuple<>):
          %27 = tag 0 %arg2 : tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
          output %27 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
        }, {
        ^bb0(%arg2: tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, %arg3: tuple<>):
          %27 = tag 1 %arg3 : tuple<> -> <tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
          output %27 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>>
        }
        switch %15 : !hugr.sum<tuple<!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>>, tuple<>> ^bb5, ^bb6
      ^bb4:  // 2 preds: ^bb2, ^bb6
        const @const_53 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 0 : i6
        %16 = load_constant @const_53 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %17 = make_tuple()
        %18 = tag 0 %17 : tuple<> -> <tuple<>>
        switch %18, %16 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
      ^bb5(%19: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb3
        const @const_58 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 8 : i6
        %20 = load_constant @const_58 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %21 = ext_op []"iadd" %20, %19 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %22 = make_tuple()
        %23 = tag 0 %22 : tuple<> -> <tuple<>>
        switch %23, %19 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb2
      ^bb6:  // pred: ^bb3
        const @const_64 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, []> : !hugr.sum<tuple<>, tuple<>>
        %24 = load_constant @const_64 : !hugr.sum<tuple<>, tuple<>>
        %25 = make_tuple()
        %26 = tag 0 %25 : tuple<> -> <tuple<>>
        switch %26 : !hugr.sum<tuple<>> ^bb4
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

