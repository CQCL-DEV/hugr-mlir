---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_call.json
---
module {
  hugr.func @foo[]() -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    %0 = cfg : () -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
      const @const_16 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = -22 : i6
      %1 = load_constant @const_16 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %2 = make_tuple()
      %3 = tag 0 %2 : tuple<> -> <tuple<>>
      switch %3, %1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
    ^bb1(%4: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb0
      output %4 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
    }
    output %0 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
  }
  hugr.func @bar[]() -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    %0 = cfg : () -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
      %1 = call @foo  []() -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> 
      %2 = make_tuple()
      %3 = tag 0 %2 : tuple<> -> <tuple<>>
      switch %3, %1 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
    ^bb1(%4: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb0
      output %4 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
    }
    output %0 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
  }
}

