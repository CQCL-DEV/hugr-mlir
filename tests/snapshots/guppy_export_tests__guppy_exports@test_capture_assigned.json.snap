---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_capture_assigned.json
---
module {
  hugr.func @foo[](%arg0: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    %0 = cfg %arg0 : (!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    ^bb0(%arg1: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):
      const @const_15 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 1 : i6
      %1 = load_constant @const_15 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %2 = ext_op []"iadd" %arg1, %1 : (!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      func @bar[](%arg2: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
        %9 = cfg %arg2 : (!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
        ^bb0(%arg3: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):
          %10 = make_tuple()
          %11 = tag 0 %10 : tuple<> -> <tuple<>>
          switch %11, %arg3 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
        ^bb1(%12: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb0
          output %12 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
        }
        output %9 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      }
      %3 = load_constant @bar : !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>>
      %4 = call @partial  [](!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>>) -> !hugr<function []() -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>> %2, %3
      %5 = call %4  []() -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> 
      %6 = make_tuple()
      %7 = tag 0 %6 : tuple<> -> <tuple<>>
      switch %7, %5 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
    ^bb1(%8: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb0
      output %8 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
    }
    output %0 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
  }
  hugr.func @partial[](!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>, !hugr<function [](!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>>) -> !hugr<function []() -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>>
}

