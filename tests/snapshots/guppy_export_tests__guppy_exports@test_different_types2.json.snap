---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_different_types2.json
---
module {
  hugr.func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    %0 = cfg %arg0 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    ^bb0(%arg1: !hugr.sum<tuple<>, tuple<>>):
      const @const_15 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<0, []> : !hugr.sum<tuple<>, tuple<>>
      %1 = load_constant @const_15 : !hugr.sum<tuple<>, tuple<>>
      switch %arg1 : !hugr.sum<tuple<>, tuple<>> ^bb2, ^bb3
    ^bb1(%2: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb4
      output %2 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
    ^bb2:  // pred: ^bb0
      const @const_18 : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, []> : !hugr.sum<tuple<>, tuple<>>
      %3 = load_constant @const_18 : !hugr.sum<tuple<>, tuple<>>
      %4 = make_tuple()
      %5 = tag 0 %4 : tuple<> -> <tuple<>>
      switch %5 : !hugr.sum<tuple<>> ^bb4
    ^bb3:  // pred: ^bb0
      const @const_23 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 5 : i6
      %6 = load_constant @const_23 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %7 = make_tuple()
      %8 = tag 0 %7 : tuple<> -> <tuple<>>
      switch %8 : !hugr.sum<tuple<>> ^bb4
    ^bb4:  // 2 preds: ^bb2, ^bb3
      const @const_28 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 4 : i6
      %9 = load_constant @const_28 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %10 = make_tuple()
      %11 = tag 0 %10 : tuple<> -> <tuple<>>
      switch %11, %9 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
    }
    output %0 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
  }
}

