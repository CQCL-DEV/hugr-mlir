---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_if_else.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>, %arg1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = cfg %arg0, %arg1 : (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg2: !hugr.sum<tuple<>, tuple<>>, %arg3: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):
        switch %arg2, %arg3 : !hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb2, ^bb3
      ^bb1(%1: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb4
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      ^bb2(%2: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
        const @const_16 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
        %3 = load_constant @const_16 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %4 = ext_op []"iadd" %2, %3 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %5 = make_tuple()
        %6 = tag 0 %5 : tuple<> -> <tuple<>>
        switch %6, %4 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb4
      ^bb3(%7: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb0
        const @const_22 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
        %8 = load_constant @const_22 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %9 = ext_op []"isub" %7, %8 : (!hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %10 = make_tuple()
        %11 = tag 0 %10 : tuple<> -> <tuple<>>
        switch %11, %9 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb4
      ^bb4(%12: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // 2 preds: ^bb2, ^bb3
        %13 = make_tuple()
        %14 = tag 0 %13 : tuple<> -> <tuple<>>
        switch %14, %12 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

