---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_if_expr_assign_both.json
---
module {
  hugr.func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    %0 = cfg %arg0 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    ^bb0(%arg1: !hugr.sum<tuple<>, tuple<>>):
      switch %arg1 : !hugr.sum<tuple<>, tuple<>> ^bb2, ^bb3
    ^bb1(%1: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb4
      output %1 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
    ^bb2:  // pred: ^bb0
      const @"const_Node { index: NodeIndex(16) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 5 : i6
      %2 = load_constant @"const_Node { index: NodeIndex(16) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %3 = make_tuple()
      %4 = tag 0 %3 : tuple<> -> <tuple<>>
      switch %4, %2 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb4
    ^bb3:  // pred: ^bb0
      const @"const_Node { index: NodeIndex(21) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = -22 : i6
      %5 = load_constant @"const_Node { index: NodeIndex(21) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %6 = make_tuple()
      %7 = tag 0 %6 : tuple<> -> <tuple<>>
      switch %7, %5 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb4
    ^bb4(%8: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // 2 preds: ^bb2, ^bb3
      %9 = make_tuple()
      %10 = tag 0 %9 : tuple<> -> <tuple<>>
      switch %10, %8 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
    }
    output %0 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
  }
}

