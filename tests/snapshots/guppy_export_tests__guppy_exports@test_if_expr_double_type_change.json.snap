---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_if_expr_double_type_change.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      %0 = cfg %arg0 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> {
      ^bb0(%arg1: !hugr.sum<tuple<>, tuple<>>):
        const @const_15 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 4 : i6
        %1 = load_constant @const_15 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        switch %arg1 : !hugr.sum<tuple<>, tuple<>> ^bb2, ^bb3
      ^bb1(%2: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // pred: ^bb4
        output %2 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
      ^bb2:  // pred: ^bb0
        const @const_18 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 1 : i6
        %3 = load_constant @const_18 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %4 = make_tuple()
        %5 = tag 0 %4 : tuple<> -> <tuple<>>
        switch %5, %3 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb4
      ^bb3:  // pred: ^bb0
        const @const_23 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> = 6 : i6
        %6 = load_constant @const_23 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
        %7 = make_tuple()
        %8 = tag 0 %7 : tuple<> -> <tuple<>>
        switch %8, %6 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb4
      ^bb4(%9: !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>):  // 2 preds: ^bb2, ^bb3
        %10 = make_tuple()
        %11 = tag 0 %10 : tuple<> -> <tuple<>>
        switch %11, %9 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>> ^bb1
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] <6 : i64>>
    }
  }
}

