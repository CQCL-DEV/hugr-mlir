---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_if_expr_reassign.json
---
module {
  hugr.func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    %0 = cfg %arg0 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
    ^bb0(%arg1: !hugr.sum<tuple<>, tuple<>>):
      const @const_27 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 5 : i6
      %1 = load_constant @const_27 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      switch %arg1, %arg1 : !hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb2, ^bb3
    ^bb1(%2: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb10
      output %2 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
    ^bb2(%3: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
      const @const_30 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 1 : i6
      %4 = load_constant @const_30 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %5 = make_tuple()
      %6 = tag 0 %5 : tuple<> -> <tuple<>>
      switch %6, %3 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb4
    ^bb3(%7: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
      const @const_35 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 6 : i6
      %8 = load_constant @const_35 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %9 = make_tuple()
      %10 = tag 0 %9 : tuple<> -> <tuple<>>
      switch %10, %7 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb4
    ^bb4(%11: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb2, ^bb3
      switch %11, %11 : !hugr.sum<tuple<>, tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb5, ^bb6
    ^bb5(%12: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb4
      const @const_41 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 6 : i6
      %13 = load_constant @const_41 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %14 = make_tuple()
      %15 = tag 0 %14 : tuple<> -> <tuple<>>
      switch %15, %12 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
    ^bb6(%16: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb4
      const @const_46 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 2 : i6
      %17 = load_constant @const_46 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %18 = make_tuple()
      %19 = tag 0 %18 : tuple<> -> <tuple<>>
      switch %19, %16 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb7
    ^bb7(%20: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb5, ^bb6
      switch %20 : !hugr.sum<tuple<>, tuple<>> ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      const @const_52 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 3 : i6
      %21 = load_constant @const_52 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %22 = make_tuple()
      %23 = tag 0 %22 : tuple<> -> <tuple<>>
      switch %23, %21 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb10
    ^bb9:  // pred: ^bb7
      const @const_57 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 4 : i6
      %24 = load_constant @const_57 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %25 = make_tuple()
      %26 = tag 0 %25 : tuple<> -> <tuple<>>
      switch %26, %24 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb10
    ^bb10(%27: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // 2 preds: ^bb8, ^bb9
      %28 = make_tuple()
      %29 = tag 0 %28 : tuple<> -> <tuple<>>
      switch %29, %27 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
    }
    output %0 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
  }
}

