---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_not_always_defined2.json
---
module {
  hugr.module {
    func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
      %0 = cfg %arg0 : (!hugr.sum<tuple<>, tuple<>>) -> !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> {
      ^bb0(%arg1: !hugr.sum<tuple<>, tuple<>>):
        switch %arg1 : !hugr.sum<tuple<>, tuple<>> ^bb2, ^bb3
      ^bb1(%1: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):  // pred: ^bb4
        output %1 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      ^bb2:  // pred: ^bb0
        %2 = make_tuple()
        %3 = tag 0 %2 : tuple<> -> <tuple<>>
        switch %3 : !hugr.sum<tuple<>> ^bb4
      ^bb3:  // pred: ^bb0
        const @const_19 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 5 : i6
        %4 = load_constant @const_19 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
        %5 = make_tuple()
        %6 = tag 0 %5 : tuple<> -> <tuple<>>
        switch %6 : !hugr.sum<tuple<>> ^bb4
      ^bb4:  // 2 preds: ^bb2, ^bb3
        const @const_24 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 4 : i6
        %7 = load_constant @const_24 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
        %8 = make_tuple()
        %9 = tag 0 %8 : tuple<> -> <tuple<>>
        switch %9, %7 : !hugr.sum<tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> ^bb1
      }
      output %0 : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
    }
  }
}

