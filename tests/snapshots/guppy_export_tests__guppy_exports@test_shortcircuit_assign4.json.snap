---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_shortcircuit_assign4.json
---
module {
  hugr.func @foo[](%arg0: !hugr.sum<tuple<>, tuple<>>, %arg1: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
    %0 = cfg %arg0, %arg1 : (!hugr.sum<tuple<>, tuple<>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>> {
    ^bb0(%arg2: !hugr.sum<tuple<>, tuple<>>, %arg3: !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>):
      const @"const_Node { index: NodeIndex(23) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = 0 : i6
      %1 = load_constant @"const_Node { index: NodeIndex(23) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %2 = ext_op []"igt_s" %arg3, %1 : (!hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>, !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>) -> !hugr.sum<tuple<>, tuple<>>
      %3 = make_tuple()
      %4 = make_tuple(%arg2 : !hugr.sum<tuple<>, tuple<>>)
      %5 = conditional(%2, %3, %4 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
      ^bb0(%arg4: tuple<>, %arg5: tuple<!hugr.sum<tuple<>, tuple<>>>):
        %17 = tag 0 %arg4 : tuple<> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
        output %17 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
      }, {
      ^bb0(%arg4: tuple<>, %arg5: tuple<!hugr.sum<tuple<>, tuple<>>>):
        %17 = tag 1 %arg5 : tuple<!hugr.sum<tuple<>, tuple<>>> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
        output %17 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
      }
      switch %5 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> ^bb2, ^bb3
    ^bb1(%6: !hugr.sum<tuple<>, tuple<>>):  // 2 preds: ^bb2, ^bb4
      output %6 : !hugr.sum<tuple<>, tuple<>>
    ^bb2:  // 2 preds: ^bb0, ^bb3
      const @"const_Node { index: NodeIndex(34) }" : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<0, []> : !hugr.sum<tuple<>, tuple<>>
      %7 = load_constant @"const_Node { index: NodeIndex(34) }" : !hugr.sum<tuple<>, tuple<>>
      %8 = make_tuple()
      %9 = tag 0 %8 : tuple<> -> <tuple<>>
      switch %9, %7 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
    ^bb3(%10: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb0
      %11 = make_tuple()
      %12 = make_tuple(%10 : !hugr.sum<tuple<>, tuple<>>)
      %13 = conditional(%10, %11, %12 : !hugr.sum<tuple<>, tuple<>>, tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>) -> !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> {
      ^bb0(%arg4: tuple<>, %arg5: tuple<!hugr.sum<tuple<>, tuple<>>>):
        %17 = tag 0 %arg4 : tuple<> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
        output %17 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
      }, {
      ^bb0(%arg4: tuple<>, %arg5: tuple<!hugr.sum<tuple<>, tuple<>>>):
        %17 = tag 1 %arg5 : tuple<!hugr.sum<tuple<>, tuple<>>> -> <tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
        output %17 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>>
      }
      switch %13 : !hugr.sum<tuple<>, tuple<!hugr.sum<tuple<>, tuple<>>>> ^bb2, ^bb4
    ^bb4(%14: !hugr.sum<tuple<>, tuple<>>):  // pred: ^bb3
      %15 = make_tuple()
      %16 = tag 0 %15 : tuple<> -> <tuple<>>
      switch %16, %14 : !hugr.sum<tuple<>>, !hugr.sum<tuple<>, tuple<>> ^bb1
    }
    output %0 : !hugr.sum<tuple<>, tuple<>>
  }
}

