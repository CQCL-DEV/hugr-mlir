---
source: tests/guppy_export_tests.rs
expression: m.as_operation()
input_file: tests/guppy-exports/test_while_change_type.json
---
module {
  hugr.func @foo[]() {
    cfg : () -> () {
      const @"const_Node { index: NodeIndex(15) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>> = -22 : i6
      %0 = load_constant @"const_Node { index: NodeIndex(15) }" : !hugr<opaque "int"["arithmetic.int.types"] [Copyable] <6 : i64>>
      %1 = make_tuple()
      %2 = tag 0 %1 : tuple<> -> <tuple<>>
      switch %2 : !hugr.sum<tuple<>> ^bb2
    ^bb1:  // pred: ^bb4
      output
    ^bb2:  // 2 preds: ^bb0, ^bb3
      const @"const_Node { index: NodeIndex(20) }" : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, []> : !hugr.sum<tuple<>, tuple<>>
      %3 = load_constant @"const_Node { index: NodeIndex(20) }" : !hugr.sum<tuple<>, tuple<>>
      switch %3 : !hugr.sum<tuple<>, tuple<>> ^bb3, ^bb4
    ^bb3:  // pred: ^bb2
      const @"const_Node { index: NodeIndex(23) }" : !hugr.sum<tuple<>, tuple<>> = #hugr.sum<1, []> : !hugr.sum<tuple<>, tuple<>>
      %4 = load_constant @"const_Node { index: NodeIndex(23) }" : !hugr.sum<tuple<>, tuple<>>
      %5 = make_tuple()
      %6 = tag 0 %5 : tuple<> -> <tuple<>>
      switch %6 : !hugr.sum<tuple<>> ^bb2
    ^bb4:  // pred: ^bb2
      %7 = make_tuple()
      %8 = tag 0 %7 : tuple<> -> <tuple<>>
      switch %8 : !hugr.sum<tuple<>> ^bb1
    }
    output
  }
}

